blueprint:
  name: Smart Heating v0.2
  description:
    "# Smart Heating \n"
  domain: automation
  source_url: https://raw.githubusercontent.com/kevinkerker/SmartHeating/refs/heads/main/SmartHeating.yaml
  input:
    climate_entity:
      name: Climate Entity
      description:
        The Thermostat or Climate Entity for the Room which will be controlled
        by this automation
      selector:
        entity:
          domain:
            - climate
          multiple: false
    section_automation_settings:
      name: Automation triggers
      icon: mdi:robot
      collapsed: true
      input:
        day_choose:
          name: Automation days
          description: Only run on the selected days
          default:
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"
            - "6"
            - "7"
          selector:
            select:
              options:
                - label: Monday
                  value: "1"
                - label: Tuesday
                  value: "2"
                - label: Wednesday
                  value: "3"
                - label: Thursday
                  value: "4"
                - label: Friday
                  value: "5"
                - label: Saturday
                  value: "6"
                - label: Sunday
                  value: "7"
              multiple: true
              mode: list
        interval_trigger:
          name: Use interval trigger
          description:
            If this option is enabled the automation runs every X minutes.
            The interval can be set below.
          default: true
          selector:
            boolean: {}
        interval_trigger_number:
          name: Interval for automation trigger
          description:
            Set the interval in minutes in which the automation will be run.
            (Only if the option above is set to true)
            
            Using the \"/\" means that it starts every x minutes if it is used without, it will start at this minute in the hour e.G. /5 means that it starts every 5 minutes and only 8 means that it starts every hour at the 8th minute.
          default: "/5"
          selector:
            text:
              suffix: "Minutes"
    section_presence:
      name: Presence
      icon: mdi:motion-sensor
      collapsed: true
      input:
        presence_detector:
          name: Presence Detector
          description:
            Only run if this boolean is true (Normally this is set to a Entity
            which reflects if someone is currently at home)
          default:
          selector:
            entity:
              domain:
                - binary_sensor
                - input_boolean
              multiple: false
        no_presence_wait:
          name: Wait time
          description:
            Time to wait befor setting the away temprature if the presence
            detector changes to false (Nobody is home anymore).
          default: 120
          selector:
            number:
              min: 0.0
              max: 3600.0
              unit_of_measurement: seconds
              step: 1.0
              mode: slider
    section_automation_blocker:
      name: Automation Blocker
      icon: mdi:robot
      collapsed: true
      input:
        automation_blocker:
          name: Automation Blocker (Optional)
          description: Only run if this boolean is in desired state (see next input)
          default:
          selector:
            entity:
              domain:
                - binary_sensor
                - input_boolean
              multiple: false
        automation_blocker_boolean:
          name: Automation Blocker Chooser (Optional)
          description:
            Desired state of automation blocker, choose on for on and off for
            off
          default: false
          selector:
            boolean: {}
    section_temperature:
      name: Temperature
      icon: mdi:thermometer
      collapsed: true
      input:
        away_temprature:
          name: Away temperature
          description:
            This is the temperature which is set when nobody is at home (Input
            Boolean above)
          default: 16
          selector:
            number:
              min: 5.0
              max: 25.0
              step: 0.5
              unit_of_measurement: temperature
              mode: slider
        eco_temprature:
          name: Default Eco Temperature
          description:
            This is the temperature which is set when someone is at home (Input
            Boolean above) and no other temperature is set for the given tiemframe.
          default: 17
          selector:
            number:
              min: 5.0
              max: 25.0
              step: 0.5
              unit_of_measurement: temperature
              mode: slider
    section_window:
      name: Window
      icon: mdi:window-closed-variant
      collapsed: true
      input:
        window_contact:
          name: Window Contact (Optional)
          description:
            Do not set temperature if Window Contact is in chosen state (see
            next input)
          default: {}
          selector:
            entity:
              domain:
                - binary_sensor
                - input_boolean
              multiple: false
        window_contact_boolean:
          name: Window Contact Chooser (Optional)
          description:
            Unwanted state of Window Contact, choose on for on and off for
            off (On is the most common case here)
          default: true
          selector:
            boolean: {}
        window_trigger:
          name: Use window trigger
          description:
            If this option is enabled the automation runs when the window state is changed.
          default: false
          selector:
            boolean: {}
        window_action_chooser:
          name: Window open action
          description: Which action should be executed on window open state
          default: "none"
          selector:
            select:
              options:
                - label: None
                  value: "none"
                - label: Off/5 degrees
                  value: "off"
                - label: Away temperature
                  value: "away"
                - label: Eco temperature
                  value: "eco"
                - label: Comfort temperature
                  value: "comfort"
              multiple: false
              mode: dropdown
        window_wait_time:
          name: Window wait time (only opened)
          description:
            Time to wait before setting the selected temperature if the window is opened.
          default: 120
          selector:
            number:
              min: 0.0
              max: 3600.0
              unit_of_measurement: seconds
              step: 1.0
              mode: slider
    section_day:
      name: "Profile: Day"
      icon: mdi:white-balance-sunny
      collapsed: true
      input:
        time_day:
          name: Time for the day
          description:
            A time input which defines the time from which on the Temparture
            Settings will be enabled when someone is at home.
          default: 09:00:00
          selector:
            time: {}
        day_eco_temprature:
          name: Day ECO Temprature (Default Temprature)
          description:
            This is the Temparture which should normally be set for this timeframe
            (when someone is at home).
          default: 19
          selector:
            number:
              min: 5.0
              max: 25.0
              step: 0.5
              unit_of_measurement: temperature
              mode: slider
        day_comfort_checker_boolean:
          name: Comfort Temprature Checker
          description:
            If this input Boolean is set to true, Comfort Temprature (see below)
            will be set at day Timeframe.
          default:
          selector:
            entity:
              domain:
                - binary_sensor
                - input_boolean
              multiple: false
        day_comfort_temprature:
          name: Day Comfort Temprature
          description:
            This is the Temparture which is set instead of ECO Temparture,
            when someone is at home and the Input boolean above is true.
          default: 21
          selector:
            number:
              min: 5.0
              max: 25.0
              step: 0.5
              unit_of_measurement: temperature
              mode: slider
    section_night:
      name: "Profile: Night"
      icon: mdi:weather-night
      collapsed: true
      input:
        time_night:
          name: Time for the night
          description:
            A time input which defines the time from which on the Temparture
            Settings will be enabled when someone is at home.
          default: "21:00:00"
          selector:
            time: {}
        night_eco_temprature:
          name: Night ECO Temprature (Default Temprature)
          description:
            This is the Temparture which should normally be set for this timeframe
            (when someone is at home).
          default: 17
          selector:
            number:
              min: 5.0
              max: 25.0
              step: 0.5
              unit_of_measurement: temperature
              mode: slider
        night_comfort_checker_boolean:
          name: Comfort Temprature Checker
          description:
            If this input Boolean is set to true, Comfort Temprature (see below)
            will be set at night Timeframe.
          default:
          selector:
            entity:
              domain:
                - binary_sensor
                - input_boolean
              multiple: false
        night_comfort_temprature:
          name: Night Comfort Temprature
          description:
            This is the Temparture which is set instead of ECO Temparture,
            when someone is at home and the Input boolean above is true.
          default: 18
          selector:
            number:
              min: 5.0
              max: 25.0
              step: 0.5
              unit_of_measurement: temperature
              mode: slider
mode: restart
max_exceeded: silent
variables:
  day_choose: !input day_choose
  interval_trigger: !input interval_trigger
  interval_trigger_number: !input interval_trigger_number
  climate_entity_var: !input climate_entity
  presence_detector: !input presence_detector
  away_temprature: !input away_temprature
  eco_temprature: !input eco_temprature
  automation_blocker: !input automation_blocker
  automation_blocker_boolean: !input automation_blocker_boolean
  window_trigger: !input window_trigger
  window_contact: !input window_contact
  window_contact_boolean: !input window_contact_boolean
  window_action_chooser: !input window_action_chooser
  window_wait_time: !input window_wait_time
  day_eco_temprature: !input day_eco_temprature
  day_comfort_temprature: !input day_comfort_temprature
  day_comfort_checker_boolean: !input day_comfort_checker_boolean
  night_eco_temprature: !input night_eco_temprature
  night_comfort_temprature: !input night_comfort_temprature
  night_comfort_checker_boolean: !input night_comfort_checker_boolean
triggers:
  - trigger: state
    entity_id: !input presence_detector
    from: "off"
    to: "on"
  - trigger: state
    entity_id: !input presence_detector
    from: "on"
    to: "off"
    for: !input no_presence_wait
  - trigger: time_pattern
    enabled: !input interval_trigger
    minutes: !input interval_trigger_number
  - trigger: time
    at: !input time_day
  - trigger: time
    at: !input time_night
  - trigger: state
    entity_id: !input window_contact
    enabled: !input window_trigger
    for: !input window_wait_time
    to: "on"
  - trigger: state
    entity_id: !input window_contact
    enabled: !input window_trigger
    to: "off"
condition:
  - condition: or
    conditions:
      - "{{ automation_blocker == none }}"
      - "{{ automation_blocker_boolean and states[automation_blocker].state == 'on'
        }}"
      - "{{ not automation_blocker_boolean and states[automation_blocker].state == 'off'
        }}"
  - "{{ day_choose | contains(now().isoweekday() | string) }}"
action:
  - choose:
      - alias: Window action
        conditions:
          - condition: or
            conditions:
              - "{{ window_contact != none and (window_contact_boolean and states[window_contact].state
                == 'on') }}"
              - "{{ window_contact != none and (not window_contact_boolean and states[window_contact].state
                == 'off') }}"
        sequence:
          - choose:
              - alias: State off
                conditions:
                  - condition: template
                    value_template: "{{ window_action_chooser == 'off' }}"
                sequence:
                  - service: climate.set_temperature
                    data:
                      temperature: 5
                    target:
                      entity_id: !input climate_entity
              - alias: State away
                conditions:
                  - condition: template
                    value_template: "{{ window_action_chooser == 'away' }}"
                sequence:
                  - service: climate.set_temperature
                    data:
                      temperature: !input away_temprature
                    target:
                      entity_id: !input climate_entity
              - alias: State eco
                conditions:
                  - condition: template
                    value_template: "{{ window_action_chooser == 'eco' }}"
                sequence:
                  - choose:
                      - alias: State day
                        conditions:
                          - condition: time
                            after: !input time_day
                            before: !input time_night
                        sequence:
                          - service: climate.set_temperature
                            data:
                              temperature: !input day_eco_temprature
                            target:
                              entity_id: !input climate_entity
                      - alias: State night
                        conditions:
                          - condition: time
                            after: !input time_night
                            before: !input time_day
                        sequence:
                          - service: climate.set_temperature
                            data:
                              temperature: !input night_eco_temprature
                            target:
                              entity_id: !input climate_entity
              - alias: State comfort
                conditions:
                  - condition: template
                    value_template: "{{ window_action_chooser == 'comfort' }}"
                sequence:
                  - choose:
                      - alias: State day
                        conditions:
                          - condition: time
                            after: !input time_day
                            before: !input time_night
                        sequence:
                          - service: climate.set_temperature
                            data:
                              temperature: !input day_comfort_temprature
                            target:
                              entity_id: !input climate_entity
                      - alias: State night
                        conditions:
                          - condition: time
                            after: !input time_night
                            before: !input time_day
                        sequence:
                          - service: climate.set_temperature
                            data:
                              temperature: !input night_comfort_temprature
                            target:
                              entity_id: !input climate_entity
      - alias: Away action
        conditions:
          - condition: state
            entity_id: !input presence_detector
            state: "off"
        sequence:
          - service: climate.set_temperature
            data:
              temperature: !input away_temprature
            target:
              entity_id: !input climate_entity
      - alias: Day action
        conditions:
          - condition: time
            after: !input time_day
            before: !input time_night
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ day_comfort_checker_boolean != none }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template:
                              "{{ states[day_comfort_checker_boolean].state == 'on'
                              }}"
                        sequence:
                          - condition: not
                            conditions:
                              - condition: template
                                value_template:
                                  "{{ (state_attr(climate_entity_var, 'temperature')
                                  | float(0)) == day_comfort_temprature }}"
                          - service: climate.set_temperature
                            data:
                              temperature: !input day_comfort_temprature
                            target:
                              entity_id: !input climate_entity
                    default:
                      - condition: not
                        conditions:
                          - condition: template
                            value_template:
                              "{{ (state_attr(climate_entity_var, 'temperature')
                              | float(0)) == day_eco_temprature }}"
                      - service: climate.set_temperature
                        data:
                          temperature: !input day_eco_temprature
                        target:
                          entity_id: !input climate_entity
            default:
              - condition: not
                conditions:
                  - condition: template
                    value_template:
                      "{{ (state_attr(climate_entity_var, 'temperature') | float(0))
                      == day_eco_temprature }}"
              - service: climate.set_temperature
                data:
                  temperature: !input day_eco_temprature
                target:
                  entity_id: !input climate_entity
      - alias: Night action
        conditions:
          - condition: time
            after: !input time_night
            before: !input time_day
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ night_comfort_checker_boolean != none }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template:
                              "{{ states[night_comfort_checker_boolean].state == 'on'
                              }}"
                        sequence:
                          - condition: not
                            conditions:
                              - condition: template
                                value_template:
                                  "{{ (state_attr(climate_entity_var, 'temperature')
                                  | float(0)) == night_comfort_temprature }}"
                          - service: climate.set_temperature
                            data:
                              temperature: !input night_comfort_temprature
                            target:
                              entity_id: !input climate_entity
                    default:
                      - condition: not
                        conditions:
                          - condition: template
                            value_template:
                              "{{ (state_attr(climate_entity_var, 'temperature')
                              | float(0)) == night_eco_temprature }}"
                      - service: climate.set_temperature
                        data:
                          temperature: !input night_eco_temprature
                        target:
                          entity_id: !input climate_entity
            default:
              - condition: not
                conditions:
                  - condition: template
                    value_template:
                      "{{ (state_attr(climate_entity_var, 'temperature') | float(0))
                      == night_eco_temprature }}"
              - service: climate.set_temperature
                data:
                  temperature: !input night_eco_temprature
                target:
                  entity_id: !input climate_entity
    default:
      - condition: not
        conditions:
          - condition: template
            value_template:
              "{{ (state_attr(climate_entity_var, 'temperature') | float(0))
              == eco_temprature }}"
      - service: climate.set_temperature
        data:
          temperature: !input eco_temprature
        target:
          entity_id: !input climate_entity
